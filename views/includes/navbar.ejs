<nav class="navbar navbar-expand-lg bg-info navbar-light sticky-top">
    <div class="container-fluid">
        <!-- Brand/Logo -->
        <div class="photo-nav-container me-3">
            <a href="/ppulists" class="photo-nav-link">
                <img src="<%= '/images/ppuhomephoto.jpg' %>"
                    alt="PPU Home Photo"
                    class="photo-nav-image">
            </a>
        </div>

        <!-- Toggler Button -->
        <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#mainNavbar"
            aria-controls="mainNavbar"
            aria-expanded="false"
            aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Search Form (visible on larger screens) -->
        <form class="d-none d-lg-flex flex-grow-1 mx-3 search-form" action="/search" method="GET" role="search">
            <div class="input-group has-validation position-relative">
                <input
                    class="form-control me-2 search-inp"
                    type="search"
                    placeholder="Search posts..."
                    name="q"
                    value="<%= locals.searchQuery || '' %>"
                    aria-label="Search posts"
                    autocomplete="off"
                    required
                />
                <div id="searchSuggestionsDesktop" class="position-absolute w-100 bg-white shadow rounded border"
                     style="top: 100%; left: 0; z-index: 1000; display: none; max-height: 300px; overflow-y: auto;"></div>
                <button class="btn btn-primary search-btn" type="submit">
                    <i class="bi bi-search"></i>
                    <span class="ms-1">Search</span>
                </button>
                <div class="invalid-feedback">Please enter a search term</div>
            </div>
        </form>

        <!-- Collapsible Content -->
        <div class="collapse navbar-collapse" id="mainNavbar">
            <!-- Search Form (visible on mobile) -->
            <form class="d-lg-none my-2 w-100 search-form" action="/search" method="GET" role="search">
                <div class="input-group has-validation position-relative">
                    <input
                        class="form-control search-inp"
                        type="search"
                        placeholder="Search posts..."
                        name="q"
                        value="<%= locals.searchQuery || '' %>"
                        aria-label="Search posts"
                        autocomplete="off"
                        required
                    />
                    <div id="searchSuggestionsMobile" class="position-absolute w-100 bg-white shadow rounded border"
                         style="top: 100%; left: 0; z-index: 1000; display: none; max-height: 300px; overflow-y: auto;"></div>
                    <button class="btn btn-primary search-btn" type="submit">
                        <i class="bi bi-search"></i>
                        <span class="visually-hidden">Search</span>
                    </button>
                    <div class="invalid-feedback">Please enter a search term</div>
                </div>
            </form>

            <!-- Navigation Links -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="/ppulists/newpost">
                        <i class="fa-solid fa-plus me-1"></i>Add New Post
                    </a>
                </li>
            </ul>

            <!-- Auth Links -->
            <ul class="navbar-nav ms-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="authDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fa-regular fa-user me-1"></i>Account
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="authDropdown">
                        <li><a class="dropdown-item" href="/login"><i class="fa-solid fa-right-to-bracket me-2"></i>Login</a></li>
                        <li><a class="dropdown-item" href="/signup"><i class="fa-solid fa-user-plus me-2"></i>Sign Up</a></li>
                        <li><hr class="dropdown-divider"></li>
                        
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</nav>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get search elements
        const desktopInput = document.querySelector('.d-lg-flex .search-inp');
        const mobileInput = document.querySelector('.d-lg-none .search-inp');
        const desktopSuggestions = document.getElementById('searchSuggestionsDesktop');
        const mobileSuggestions = document.getElementById('searchSuggestionsMobile');

        // Function to fetch suggestions from the API
        async function fetchSuggestions(query, suggestionBox) {
            if (!query || query.length < 1) {
                suggestionBox.style.display = 'none';
                return;
            }

            try {
                // Fetch real suggestions from the database via API
                const response = await fetch(`/api/search-suggestions?q=${encodeURIComponent(query)}`);

                if (!response.ok) {
                    throw new Error(`API error: ${response.status}`);
                }

                const suggestions = await response.json();

                // Display suggestions with Google-like styling
                if (suggestions.length > 0) {
                    // Get the lowercase query for comparison and highlighting
                    const lowerQuery = query.toLowerCase();

                    suggestionBox.innerHTML = suggestions.map(suggestion => {
                        // Highlight the matching part of the suggestion
                        let highlightedTitle = suggestion.title;
                        if (highlightedTitle.toLowerCase().includes(lowerQuery)) {
                            const regex = new RegExp(`(${query})`, 'gi');
                            highlightedTitle = highlightedTitle.replace(regex, '<strong>$1</strong>');
                        }

                        // Different styling for modifiers vs. actual posts
                        if (suggestion.isModifier) {
                            return `<div class="suggestion-item p-2 border-bottom d-flex align-items-center"
                                        style="cursor: pointer;" data-is-modifier="true">
                                <i class="bi bi-funnel me-2 text-muted small"></i>
                                <div>${highlightedTitle}</div>
                            </div>`;
                        } else {
                            return `<div class="suggestion-item p-2 border-bottom d-flex align-items-center"
                                        style="cursor: pointer;" data-post-id="${suggestion.id}">
                                <i class="bi bi-search me-2 text-muted small"></i>
                                <div>${highlightedTitle}</div>
                            </div>`;
                        }
                    }).join('');

                    // Add click handlers to suggestions
                    suggestionBox.querySelectorAll('.suggestion-item').forEach(item => {
                        item.addEventListener('click', function() {
                            // Find the closest input and form
                            const form = this.closest('form');
                            const input = form.querySelector('.search-inp');

                            // Get the text content without the icon
                            const textContent = this.querySelector('div').textContent;

                            // Check if this is a post ID or a modifier
                            const postId = this.getAttribute('data-post-id');
                            const isModifier = this.getAttribute('data-is-modifier') === 'true';

                            if (postId) {
                                // If it's a post ID, redirect directly to that post
                                window.location.href = `/ppulists/${postId}`;
                            } else {
                                // Otherwise, set the input value and submit the form for search
                                input.value = textContent;
                                suggestionBox.style.display = 'none';
                                form.submit();
                            }
                        });
                    });

                    suggestionBox.style.display = 'block';
                } else {
                    // If no suggestions from API, show a message
                    suggestionBox.innerHTML = `
                        <div class="p-2 text-muted small">
                            No matching posts found
                        </div>
                    `;
                    suggestionBox.style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching suggestions:', error);
                suggestionBox.style.display = 'none';
            }
        }

        // Debounce function to limit how often a function is called
        function debounce(func, wait) {
            let timeout;
            return function(...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        // Set up event listeners for desktop search
        if (desktopInput && desktopSuggestions) {
            // Use debounce to prevent too many suggestion requests
            const debouncedFetchDesktop = debounce(function(value) {
                fetchSuggestions(value, desktopSuggestions);
            }, 150); // 150ms delay

            desktopInput.addEventListener('input', function() {
                debouncedFetchDesktop(this.value);
            });

            desktopInput.addEventListener('focus', function() {
                if (this.value.length >= 1) {
                    fetchSuggestions(this.value, desktopSuggestions);
                }
            });

            // Add keyboard navigation for suggestions
            desktopInput.addEventListener('keydown', function(e) {
                if (desktopSuggestions.style.display === 'none') return;

                const items = desktopSuggestions.querySelectorAll('.suggestion-item');
                const activeItem = desktopSuggestions.querySelector('.suggestion-item.active');
                let activeIndex = -1;

                // Find current active item index
                if (activeItem) {
                    items.forEach((item, i) => {
                        if (item === activeItem) activeIndex = i;
                    });
                }

                // Handle arrow keys
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (activeItem) activeItem.classList.remove('active');
                    activeIndex = (activeIndex + 1) % items.length;
                    items[activeIndex].classList.add('active');
                    items[activeIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (activeItem) activeItem.classList.remove('active');
                    activeIndex = (activeIndex - 1 + items.length) % items.length;
                    items[activeIndex].classList.add('active');
                    items[activeIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'Enter' && activeItem) {
                    e.preventDefault();
                    const postId = activeItem.getAttribute('data-post-id');
                    const isModifier = activeItem.getAttribute('data-is-modifier') === 'true';

                    if (postId) {
                        // If it's a post ID, redirect directly to that post
                        window.location.href = `/ppulists/${postId}`;
                    } else {
                        // Otherwise, set the input value and submit the form for search
                        this.value = activeItem.querySelector('div').textContent;
                        desktopSuggestions.style.display = 'none';
                        this.form.submit();
                    }
                } else if (e.key === 'Escape') {
                    desktopSuggestions.style.display = 'none';
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!desktopInput.contains(e.target) && !desktopSuggestions.contains(e.target)) {
                    desktopSuggestions.style.display = 'none';
                }
            });
        }

        // Set up event listeners for mobile search
        if (mobileInput && mobileSuggestions) {
            // Use debounce to prevent too many suggestion requests
            const debouncedFetchMobile = debounce(function(value) {
                fetchSuggestions(value, mobileSuggestions);
            }, 150); // 150ms delay

            mobileInput.addEventListener('input', function() {
                debouncedFetchMobile(this.value);
            });

            mobileInput.addEventListener('focus', function() {
                if (this.value.length >= 1) {
                    fetchSuggestions(this.value, mobileSuggestions);
                }
            });

            // Add keyboard navigation for suggestions
            mobileInput.addEventListener('keydown', function(e) {
                if (mobileSuggestions.style.display === 'none') return;

                const items = mobileSuggestions.querySelectorAll('.suggestion-item');
                const activeItem = mobileSuggestions.querySelector('.suggestion-item.active');
                let activeIndex = -1;

                // Find current active item index
                if (activeItem) {
                    items.forEach((item, i) => {
                        if (item === activeItem) activeIndex = i;
                    });
                }

                // Handle arrow keys
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    if (activeItem) activeItem.classList.remove('active');
                    activeIndex = (activeIndex + 1) % items.length;
                    items[activeIndex].classList.add('active');
                    items[activeIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    if (activeItem) activeItem.classList.remove('active');
                    activeIndex = (activeIndex - 1 + items.length) % items.length;
                    items[activeIndex].classList.add('active');
                    items[activeIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'Enter' && activeItem) {
                    e.preventDefault();
                    const postId = activeItem.getAttribute('data-post-id');
                    const isModifier = activeItem.getAttribute('data-is-modifier') === 'true';

                    if (postId) {
                        // If it's a post ID, redirect directly to that post
                        window.location.href = `/ppulists/${postId}`;
                    } else {
                        // Otherwise, set the input value and submit the form for search
                        this.value = activeItem.querySelector('div').textContent;
                        mobileSuggestions.style.display = 'none';
                        this.form.submit();
                    }
                } else if (e.key === 'Escape') {
                    mobileSuggestions.style.display = 'none';
                }
            });

            // Hide suggestions when clicking outside
            document.addEventListener('click', function(e) {
                if (!mobileInput.contains(e.target) && !mobileSuggestions.contains(e.target)) {
                    mobileSuggestions.style.display = 'none';
                }
            });
        }

        // Add CSS for active suggestion item
        const style = document.createElement('style');
        style.textContent = `
            .suggestion-item.active {
                background-color: #f8f9fa;
            }
            .suggestion-item:hover {
                background-color: #f8f9fa;
            }
        `;
        document.head.appendChild(style);
    });
</script>